<!-- The HTML layout of the element -->
<div is="ppsl-product-menu">
  {{ this.showReturnButton() }}
  <ul class="menu-list">
    {{ this.contentHTML }}
  </ul>
  {{ this.paginationContentHTML }}
</div>

<!-- The logic of the element -->
<script type="module">
  import { html } from '@uce'

  export default {
    props: {
      type: null,
      data: null,
      menuData: null,
      page: 1,
      defer: false,
      createOnClick: false,
      contentHTML: null,
      paginationContentHTML: null,
      customNextClick: null,
      paginationClick: null
    },

    async loadData() {
      let data
      if (this.data) {
        data = await document.getElementById('productmain').getChildContent(this.data, this.page)
      } else {
        data = await document.getElementById('productmain').loadLoop(this.type.plural, null, this.page)
      }

      this.menuData = data.results || data

      if (this.menuData.length > 0) {
        const dataParentType = getParentType(getParentChildType(this.menuData[0].content).plural)
        if (this.customNextClick === null) {
          this.customNextClick = {
            func: document.getElementById('productmain')[dataParentType.singular].bind(document.getElementById('productmain'))
          }
        }

        this.paginationClick = data.results ? {
          func: this.paginate.bind(this),
          currentPage: data.currentPage,
          maxPages: data.maxPages
        } : undefined
      }

      this.defer = false
      return this.showMenu()
    },

    showMenu() {
      if (this.defer) {
        return this.loadData()
      }

      this.paginationContentHTML = this.showPagination()
      return this.menuData && this.menuData.length > 0 ? this.menuData.map((object, index) => html`
        <li>
          ${object.sha || object.new ? html`
          <a onclick=${() => this.createOnClick ? undefined : this.customNextClick.func(this.menuData[index])}>
            <div class="level is-mobile">
              <div class="level-left">
                ${object.content.label.length > 64
                  ? html`<small class="is-size-7 level-item" title="${object.content.label}">${`${this.paginationClick ? `[${object._id}] ` : ''}${object.content.label.substr(0, 70)}${object.content.label.length > 72 ? '...' : ''}`}</small>`
                  : html`<p class="level-item">${`${this.paginationClick ? `[${object._id}] ` : ''}${object.content.label}`}</p>`
                }
                ${object.new ? html`
                  <small class="level-item tag is-success">New</small>
                ` : undefined}
                ${object.edited ? html`
                  <small class="level-item tag">Edited</small>
                ` : undefined}
                ${((object.state === 'closed') || object.closedAt) && !object.mergedAt ? html`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-danger"></span>
                    <span>Closed</span>
                  </small>
                ` : undefined}
                ${object.mergedAt ? html`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-success"></span>
                    <span>Merged</span>
                  </small>
                ` : undefined}
                ${object.state === 'open' ? html`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-info"></span>
                    <span>Open</span>
                  </small>
                ` : undefined}
              </div>
              <div class="level-right">
                ${this.createOnClick ? html`
                  <div class="level-item">
                    <button class="button is-small is-text" onclick=${(ev) => this.customNextClick.func(ev, this.menuData[index], this.type)}>
                      <span>Copy</span>
                      <span is="ppsl-icon" icon="copy"></span>
                    </button>
                  </div>
                  <div class="level-item">
                    <button class="button is-small is-text" onclick=${(ev) => this.customNextClick.func(ev, this.menuData[index], this.type, true)}}>
                      <span>Clone</span>
                      <span is="ppsl-icon" icon="link-2"></span>
                    </button>
                  </div>
                ` : html`
                  <div class="level-item">
                    <span is="ppsl-icon" icon="chevron-right"></span>
                  </div>
                `}
              </div>
            </div>
          </a>` : html`<a>Unknown entry labeled "${object.content.label || object._id}".</a>`}
        </li>
      `) : html`
        <p class="has-text-centered">None available.</p>
      `
    },

    showReturnButton() {
      if (this.customPreviousClick !== undefined) {
        return html`
          <a class="button is-fullwidth" onclick=${() => this.customPreviousClick.func()}>
            <span is="ppsl-icon" icon="chevron-left"></span>
            <span>${this.customPreviousClick.label}</span>
          </a>
          <hr>
        `
      }
    },

    async paginate (page) {
      this.page = page
      this.contentHTML = document.getElementById('root').loaderTemplate(3)
      this.paginationContentHTML = null
      this.contentHTML = await this.loadData()
    },

    showPagination() {
      if (!this.paginationClick) return

      const { currentPage, maxPages } = this.paginationClick

      return html`
        <hr>
        <nav class="pagination" role="navigation" aria-label="pagination">
          ${currentPage > 1 ? html`<a class="pagination-previous" onclick=${() => this.paginationClick.func(currentPage - 1)}>Previous</a>` : undefined}
          ${currentPage < maxPages ? html`<a class="pagination-next" onclick=${() => this.paginationClick.func(currentPage + 1)}>Next page</a>` : undefined}
          <ul class="pagination-list">
            <li>
              <div class="field has-addons">
                <div class="control">
                  <input class="input" type="number" value="${currentPage}" id="paginationsearch">
                </div>
                <div class="control">
                  <a class="button is-info" onclick=${() => {
                    this.paginationClick.func(Number(document.getElementById('paginationsearch').value || 1))
                  }}>
                    <span is="ppsl-icon" icon="search"></span>
                  </a>
                </div>
              </div>
            </li>
            <li><span class="pagination-ellipsis">&hellip;</span></li>
            <li><a class="pagination-link" aria-label="${`Goto page ${maxPages}`}" onclick=${() => this.paginationClick.func(maxPages)}>${maxPages}</a></li>
          </ul>
        </nav>
      `
    },

    setup(element) {
      element.classList.add('menu')

      if (element.data && element.data.length > 0) element.menuData = element.data

      element.connected = async () => {
        element.contentHTML = await element.showMenu()
      }

      element.contentHTML = document.getElementById('root').loaderTemplate(3)
    }
  }
//# sourceURL=ppsl-product-menu.js
</script>