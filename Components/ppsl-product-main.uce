
<div is=ppsl-product-main>
<div class=card>
<div class=card-header>{{this.titleHTML}}</div>
<div class=card-content>{{this.contentHTML}}</div>
</div>
</div>
<script type=module>import{html as t}from"@uce"
export default{props:{contentHTML:null,selectedData:{product:null,problem:null,solution:null,link:null}},async loadLoop(t,e,i=1){e=JSON.parse(JSON.stringify(e))
const{editedData:s,data:o}=self.GlobalContext,n=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],l=getParentType(t),c=s[l+"s"].find((t=>t._id===n[l]))
if(!e){let i
try{i=await self.getBranchDirectoryContent(t)}catch(e){i=s[t]}e=i.map((t=>t.label))}c&&(e.push(...c.content[t]),e=[...new Set([...e])])
const d=[],a=s[t],r=Math.ceil(e.length/25),p=e.length>25&&"number"==typeof i
e.sort(((t,e)=>e-t))
for(let s=p?25*(i-1):0;(!p||s<25*i)&&s<e.length;s++){const i=e[s]
if(!i)continue
const n=a.find((t=>t._id===i))
if(n)d.push(n)
else if(void 0===n||void 0===n.new){let e=await self.loadFromGithub(t,i)
null!==e?d.push(o[t][e]):d.push({_id:i,content:{}})}}return p?{results:d,maxPages:r,currentPage:i}:d},create(e,i,s){const o=e+"s",n=getParentType(o)
let l
this.titleHTML=t`
        <p class="card-header-title">Creating new ${e} for ${n} "${i}"</p>
      `,l="problem"===e?{label:`Return to ${o} list`,func:()=>this.showPrevious(o)}:{label:`Return to ${n}`,func:()=>this.showPrevious(n)},this.contentHTML=t`
        <div is="ppsl-product-create"
          type="${o}"
          .data=${s}
          .customPreviousClick=${l}
          .customNextClick=${{label:`Add from existing ${e}s`,func:this[o].bind(this)}}
        ></div>
      `},showPrevious(t,e){const{editedData:i,data:s}=self.GlobalContext,o=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],n=getParentType(t)
let l
if(void 0!==n){const t=n+"s",e=o[n]
l=i[t].find((t=>t._id===e)),void 0===l&&(l=s[t].find((t=>t._id===e)))}else{const e=t+"s",n=o[t]
l=i[e].find((t=>t._id===n)),void 0===l&&(l=s[e].find((t=>t._id===n)))}return this[t](l)},cloneOrCopy(t,e,i,s=!1){t.preventDefault()
const{editedData:o,data:n}=self.GlobalContext,l=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],c=i+"s",d=getParentType(c),a=d+"s"
if(s){const t=o[a].findIndex((t=>t._id===l[d]))
if(-1===t){const t=JSON.parse(JSON.stringify(n[a].find((t=>t._id===l[d]))))
t.content[c].push(e._id)
const i=new Set(t.content[c])
t.content[c]=[...i]
const s=o[a].push(t)
o[a][s-1].edited=!0}else{const i=o[a][t]
i.content[c].push(e._id)
const s=new Set(i.content[c])
i.content[c]=[...s],i.edited=!0}self.saveDataToStorage("editedData",o),this.showPrevious("product"===d?"problems":d)}else this.create.bind(this)(i,l[d],e.content)},async getChildContent(t,e,i){const s=getParentChildType(t.content)+"s"
return await this.loadLoop(s,i?null:t.content[s],e)},async problems(e,i){let s
this.titleHTML=t`<p class="card-header-title">Loading problems...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3),e?(this.titleHTML=t`
          <p class="card-header-title">Problems for "${e._id}"</p>
          <a class="card-header-icon" onclick=${()=>this.create.bind(this)("problem",e._id)}>
            <span is="ppsl-icon" icon="plus-square"></span>
          </a>
        `,s=t`
          <div is="ppsl-product-menu"
            .data="${e}"
            .defer="${!0}"
            .customNextClick=${{func:this.problem.bind(this)}}
          ></div>
        `):(this.titleHTML=t`
          <p class="card-header-title">All problems</p>
          <a class="card-header-icon" onclick=${()=>this.showPrevious("problems")}>
            <span is="ppsl-icon" icon="x"></span>
          </a>
        `,s=t`
          <div is="ppsl-product-menu"
            type="problem"
            .defer="${!0}"
            .createOnClick="${!0}"
            .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
          ></div>
        `),this.contentHTML=s},problem(e){this.titleHTML=t`
        <p class="card-header-title">Problem - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.problem=e._id,document.getElementById("product").selectedData[this.productId].problem=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="problems"
          .customPreviousClick=${{label:"Return to problems list",func:()=>this.showPrevious("problems")}}
        ></div>
      `},async solutions(e,i){this.titleHTML=t`<p class="card-header-title">Loading solutions...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3),this.titleHTML=t`
        <p class="card-header-title">All solutions</p>
        <a class="card-header-icon" onclick=${()=>this.showPrevious("problem")}>
          <span is="ppsl-icon" icon="x"></span>
        </a>
      `,this.contentHTML=t`
        <div is="ppsl-product-menu"
          type="solution"
          .defer="${!0}"
          .createOnClick="${!0}"
          .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
        ></div>
      `},solution(e){this.titleHTML=t`
        <p class="card-header-title">Solution - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.solution=e._id,document.getElementById("product").selectedData[this.productId].solution=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="solutions"
          .customPreviousClick=${{label:"Return to problem",func:()=>this.showPrevious("problem")}}
        ></div>
      `},async links(e,i){this.titleHTML=t`<p class="card-header-title">Loading links...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3),this.titleHTML=t`
        <p class="card-header-title">All links</p>
        <a class="card-header-icon" onclick=${()=>this.showPrevious("solution")}>
          <span is="ppsl-icon" icon="x"></span>
        </a>
      `,this.contentHTML=t`
        <div is="ppsl-product-menu"
          type="link"
          .defer="${!0}"
          .createOnClick="${!0}"
          .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
        ></div>
      `},link(e){this.titleHTML=t`
        <p class="card-header-title">Link - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.link=e._id,document.getElementById("product").selectedData[this.productId].link=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="links"
          .customPreviousClick=${{label:"Return to solution",func:()=>this.showPrevious("solution")}}
          .customNextClick=${{label:"Open link",func:t=>Object.assign(document.createElement("a"),{target:t.content.label,href:t.content.url}).click()}}
        ></div>
      `},toggleEdit(t){t&&(t.preventDefault(),t.stopPropagation())
const e=document.getElementById("productdescription").toggleEdit(),i=this.querySelector(".card-header-icon span")
i.icon=e?"x":"edit",i.showIcon()},setup(t){t.id="productmain",t.showPrevious.bind(t)("problems")}}
</script>